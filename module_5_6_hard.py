import time
# Реализовать классы для взаимодействия с платформой,
# каждый из которых будет содержать методы добавления видео,
# авторизации и регистрации пользователя и т.д.

# создание метода "check_password", который при регистрации будет проверять пароль на надежность,
# если его длина составляет не менее 12 символов, при этом он должен содержать хотя бы одну заглавную букву,
# хотя бы одну строчную букву и хотя бы одну цифру.
def check_password(password):
    digits = '1234567890'
    upper_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lower_letters = 'abcdefghijklmnopqrstuvwxyz'
    password_confirm = set(password)
    # создание переменной с пустым списком для добавления информации по вводимому паролю.
    recom_password = []
    # условие если длина(len) пароля меньше 12 символов, добавляем строку с рекомендацией сколько символов не хватает.
    if len(password) < 12:
        recom_password.append(f'увеличить число символов - {12 - len(password)}')
    # пройдем циклом(for) который позволяет проверить, содержит ли пароль определённые типы символов.
    for what, message in ((digits, 'цифру'),
                              (upper_letters, 'заглавную букву'), (lower_letters, 'строчную букву')):
        # условие если не все символы указаны по символам в пароле, добавляем строку с добавлением необходимого символа.
        if all(char not in what for char in password_confirm):
            recom_password.append(f'добавить 1 {message}')
    # условие если введенный пароль имеет не достаточно символов, вывести строку с учетом рекомендаций,
    # используя метод "join" позволяющий объединить любое количество строк, вернуть результат в виде новой строки.
    if recom_password:
        print("Слабый пароль. Рекомендации:", ", ".join(recom_password))
    # условие если введенный пароль соответствует требованию.
    else:
        print('Сильный пароль.')

# создание класса "User", который содержит атрибуты для создания объекта (имя, пароль и возраст).
class User:
    # создание объекта через метод "__init__"
    def __init__(self, nickname, password, age):
        self.nickname = str(nickname)  # атрибут будет создаваться при создании объекта.
        self.password = int(password)  # атрибут будет создаваться при создании объекта.
        self.age = int(age)            # атрибут будет создаваться при создании объекта.
    # создание метода "__str__", который возвращает строковое представление заданного объекта.
    def __str__(self):
        return self.nickname

# создание класса "Video", который содержит атрибуты для создания объекта (название видео,
# продолжительность воспроизведения, секунда остановки и ограничение по возрасту).
class Video:
    # создание объекта через метод "__init__".
    def __init__(self, title, duration, adult_mode: bool = False):
        self.title = str(title)           # атрибут будет создаваться при создании объекта.
        self.duration = int(duration)     # атрибут будет создаваться при создании объекта.
        self.time_now = 0                 # атрибут будет меняться при создании объекта, изначально установлен на = 0.
        self.adult_mode = adult_mode      # атрибут будет учитываться при создании объекта, изначально = False.

    # создание метода "__eq__", который сравнивает два атрибута по названию видео.
    def __eq__(self, other):
        return self.title == other.title

    # создание метода "__contains__", который проверяет, находится ли данный объект в названии видео.
    def __contains__(self, item):
        return item in self.title

# создание класса "UrTube", который содержит несколько атрибутов, для создания объекта.
class UrTube:
    # создание объекта через метод "__init__".
    def __init__(self):
        self.users = []              # атрибут содержит список объектов класса "User".
        self.videos = []             # атрибут содержит список объектов класса "Video".
        self.current_user = None     # атрибут содержит текущего пользователя класса "User", изначально = None.

    # создание метода "register", который принимает три атрибута: "nickname", "password", "age", и добавляет пользователя
    # в список, если пользователя не существует (с таким же именем).
    def register(self, nickname, password, age):
        password = hash(password)       # атрибут содержит хэшированное представление пароля
        # пройдем циклом(for) для пользователя в списке объектов класса "User".
        for user in self.users:
            # условие если имя пользователя уже существует в списке, выводим строку и возвращаем результат
            if user.nickname == nickname:
                print(f"Пользователь {nickname} уже существует")
                return

        new_user = User(nickname, password, age)   # атрибут будет содержать аргументы класса "User", новый пользователь.
        self.users.append(new_user)                # добавление нового пользователя в список объектов класса "User".
        self.current_user = new_user               # атрибут будет содержать нового пользователя.

    # создание метода "log_out" для сброса текущего пользователя на None.
    def log_out(self):
        self.current_user = None

    # создание метода "log_in", который принимает на вход аргументы: "nickname", "password",
    # и пытается найти пользователя в "users" с такими же логином и паролем. Если такой пользователь существует,
    # то "current_user" меняется на найденного.
    def log_in(self, nickname, password):
        # пройдем циклом(for) для пользователя в списке объектов класса "User".
        for user in self.users:
            # условие если имя пользователя и пароль совпадают с данными в списке регистрации,
            if nickname == user.nickname and password == user.password:
                self.current_user = user           # атрибут будет содержать текущего пользователя.

    # создание метода "add", который принимает неограниченное кол-во объектов класса "Video" и все добавляет в "videos",
    # если с таким же названием видео ещё не существует. В противном случае ничего не происходит.
    def add(self, *args):
        # пройдем циклом(for) для нового видео в списке объектов класса "Video".
        for new_video in args:
            # условие если новое видео не найдено в списке объектов класса "Video".
            if new_video not in self.videos:
                self.videos.append(new_video)      # добавление нового видео в список объектов класса "Video".

    # создание метода "get_videos", который принимает поисковое слово(строку "str") и возвращает список названий всех видео,
    # содержащих поисковое слово. Следует учесть, что слово 'UrbaN' присутствует в строке 'Urban the best' (не учитывать регистр).
    def get_videos(self, search: str):
        list_video = []                           # атрибут содержит список(list) всех видео.
        # пройдем циклом(for) для запрошенного видео в списке объектов класса "Video".
        for video in self.videos:
            # условие если запрошенное видео не учитывая регистр(upper) присутствует в списке объектов класса "Video".
            if search.upper() in video.title.upper():
                list_video.append(video.title)     # добавление запрошенного видео в список(list).
        # возвращает(return) список названий всех видео, содержащих поисковое слово.
        return list_video

    # создание метода "watch_video", который принимает название фильма, если не находит точного совпадения(вплоть до пробела),
    # то ничего не воспроизводится, если же находит - ведётся отчёт в консоль на какой секунде ведётся просмотр.
    # После текущее время просмотра данного видео сбрасывается.
    def watch_video(self, new_video: str):
        # условие если нет пользователя, выводим строку с предупреждением.
        if not self.current_user:
            print("Войдите в аккаунт, чтобы смотреть видео")
            return
        # пройдем циклом(for) для названия видео(переменная "а") в списке объектов класса "Video".
        for a in self.videos:
            # условие если название видео в списке совпадает с запрашиваемым видео.
            if a.title == new_video:
                # условие если название видео имеет ограничение по возрасту и текущий пользователь < 18 лет,
                # выводим строку с предупреждением.
                if a.adult_mode and self.current_user.age < 18:
                    print("Вам нет 18 лет, пожалуйста покиньте страницу")
                    return

                # пройдем циклом(for) для просмотра видео от 1 до 10 секунд, после воспроизведения выведем строку: "Конец видео".
                # для паузы между выводами секунд воспроизведения используем функцию "sleep" из модуля "time"(import time).
                for i in range(1, 11):
                    print(i, end=' ')
                    time.sleep(1)
                    a.time_now += 1
                a.time_now = 0
                print("Конец видео")

if __name__ == '__main__':
    ur = UrTube()
    v1 = Video('Лучший язык программирования 2024 года', 200)
    v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)

    # Добавление видео
    ur.add(v1, v2)

    # Проверка поиска
    print(ur.get_videos('лучший'))
    print(ur.get_videos('ПРОГ'))

    # Проверка на вход пользователя и возрастное ограничение
    ur.watch_video('Для чего девушкам парень программист?')
    ur.register('vasya_pupkin', 'lolkekcheburek', 13)
    ur.watch_video('Для чего девушкам парень программист?')
    ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)
    ur.watch_video('Для чего девушкам парень программист?')

    # Проверка входа в другой аккаунт
    ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)
    print(ur.current_user)

    # Попытка воспроизведения несуществующего видео
    ur.watch_video('Лучший язык программирования 2024 года!')


